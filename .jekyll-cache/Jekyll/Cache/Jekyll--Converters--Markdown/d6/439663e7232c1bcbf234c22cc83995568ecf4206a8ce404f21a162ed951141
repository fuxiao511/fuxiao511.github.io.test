I"2<h1 id="资源压力评估方法">资源压力评估方法</h1>

<p>https://www.cnblogs.com/Linux-tech/p/12961296.html</p>

<h2 id="load-average">load average</h2>

<p>https://blog.csdn.net/xiaoqiaoq0/article/details/106932338</p>

<p>系统平均负载是指在特定时间间隔内运行队列中（在 CPU 上运行或者等待运行）的平均进程数。Linux 进程中 running 和 uninterruptible 状态进程数量加起来的占比就是当前系统 load。</p>

<p>算法为：</p>

<p><code class="language-plaintext highlighter-rouge">for_each_possible_cpu(cpu)</code></p>

<p>​    <code class="language-plaintext highlighter-rouge">nr_active += cpu_of(cpu)-&gt;nr_running + cpu_of(cpu)-&gt;nr_uninterruptible;</code></p>

<p>​    <code class="language-plaintext highlighter-rouge">avenrun[n] = avenrun[0] * exp_n + nr_active * (1 - exp_n)</code></p>

<p>Loadavg 有它固有的一些缺陷：</p>

<ul>
  <li>uninterruptible的进程，<strong>无法区分它是在等待 CPU 还是 IO</strong>。无法精确评估单个资源的竞争程度；</li>
  <li>最短的时间粒度是 1 分钟，以 5 秒间隔采样。很难精细化管理<strong>资源竞争毛刺</strong>和<strong>短期过度使用</strong>；</li>
  <li>结果以进程数量呈现，还要结合 cpu 数量运算，很难直观判断当前系统资源是否紧张，是否影响任务吞吐量。</li>
</ul>

<h2 id="vmpressure">vmpressure</h2>

<p>在每次系统尝试做do_try_to_free_pages 回收内存时进行计算。其计算方法非常简单：</p>

<p>(1 - reclaimed/scanned)*100，也就是说<strong>回收失败的内存页越多，内存压力越大</strong>。</p>

<p>同时 vmpressure 提供了通知机制，用户态或内核态程序都可以注册事件通知，应对不同等级的压力。</p>

<p>默认定义了三级压力：low/medium/critical。low 代表正常回收；medium 代表中等压力，可能存在页交换或回写，默认值是 65%；critical 代表内存压力很大，即将 OOM，建议应用即可采取行动，默认值是 90%。</p>

<p>vmpressure 也有一些缺陷：</p>

<ul>
  <li>结果仅体现内存回收压力，不能反映<strong>系统在申请内存上的资源等待时间</strong>；</li>
  <li>计算周期比较粗；</li>
  <li>粗略的几个等级通知，无法精细化管理。</li>
</ul>

<h2 id="psi">PSI</h2>

<p>需要在grub的cmdline中添加参数 psi=1</p>

<p>[root@localhost ~]# cat /proc/cmdline
BOOT_IMAGE=(hd1,gpt2)/vmlinuz-5.14.0-160.el9.x86_64 root=/dev/mapper/cs-root ro crashkernel=1G-4G:192M,4G-64G:256M,64G-:512M resume=/dev/mapper/cs-swap rd.lvm.lv=cs/root rd.lvm.lv=cs/swap rhgb quiet psi=1</p>

<p>During the memcache test, CPU load was nopsi=78.05% psi=78.98% in    the first half and nopsi=77.52% psi=78.25%, so PSI added between    0.7 and 0.9 percentage points to the CPU load, a difference of    about 1%.
 在memcache测试期间，上半场CPU负载为nopsi=78.05%psi=78.98%，nopsi=77.52%psi=78.25%，因此psi在CPU负载上增加了0.7到0.9个百分点，相差约1%。</p>

<p><strong>PSI(Pressure Stall Information)</strong> 字面意思就是由于资源（CPU、内存和 IO）压力造成的任务执行停顿。<strong>PSI</strong> 量化了由于硬件资源紧张造成的任务执行中断，统计了系统中任务等待硬件资源的时间。我们可以用 <strong>PSI</strong> 作为指标，来衡量硬件资源的压力情况。停顿的时间越长，说明资源面临的压力越大。</p>

<p><code class="language-plaintext highlighter-rouge">[root@localhost linux]# cat /proc/pressure/cpu</code>
<code class="language-plaintext highlighter-rouge">some avg10=0.03 avg60=0.00 avg300=0.00 total=120957639</code>
<code class="language-plaintext highlighter-rouge">full avg10=0.01 avg60=0.00 avg300=0.00 total=119390710</code></p>

<blockquote>
  <p><strong>avg10=0.03</strong> 意思是任务因为 CPU 资源的不可用，在最近的 10 秒内，有 0.03%的时间停顿等待 CPU。如果 avg 大于 40 ，也就是有 40% 时间在等待硬件资源，就说明这种资源的压力已经比较大了。</p>

  <p><strong>total</strong> 是任务停顿的总时间，以微秒（microseconds）为单位。通过 total 可以检测出停顿持续太短而无法影响平均值的情况。</p>
</blockquote>

<p><strong>some</strong> 指标说明一个或多个任务由于等待资源而被停顿的时间百分比。</p>

<p><img src="资源压力评估方法.assets/08a584cbf230587957199a826fa408e0-16650187788062.png" alt="img" /></p>

<p><strong>full</strong> 指标表示所有的任务由于等待资源而被停顿的时间百分比。在下图的例子中，在最近的 60 秒内，任务 B 等待了 30 秒的内存，任务 A 等待了 10 秒内存，并且和任务 B 的等待时间重合。在这个重合的时间段 10 秒内，任务 A 和 任务 B 都在等待内存，结果是 some 指标为 50%，full 指标为 <strong>10/60 = 16.66%</strong>。</p>

<p><strong>full</strong> 表明了<strong>总吞吐量的损失</strong>，在这种状态下，所有任务都在等待资源，CPU 周期将被浪费。</p>

<p><img src="资源压力评估方法.assets/37d31a5e20d9e81ad8508ef561051f07-16650188668484.png" alt="img" /></p>

<h2 id="psi-阈值监控">PSI 阈值监控</h2>

<p>用户可以向 PSI 注册触发器，在资源压力超过自定义的阈值时获得通知。一个触发器定义了特定时间窗口内最大累积停顿时间，例如，在任何 500ms 的窗口内，累计 100ms 的停顿时间会产生一个通知事件。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;some|full&gt; &lt;停顿阈值&gt; &lt;时间窗口&gt;
</code></pre></div></div>

<p>向 <code class="language-plaintext highlighter-rouge">/proc/pressure/io</code> 写入 “some 500000 1000000”，代表着在任何 1 秒的时间窗口内，如果一个或多个进程因为等待 IO 而造成的时间停顿超过了阈值 500ms，将触发通知事件。</p>

<p><strong>可以监控整个系统的压力，也可以监控特定cgroup的压力,如果这个cgroup内只有一个虚拟机，就是这个虚拟机的压力，这是some和full的结果一样</strong></p>

<p>/sys/fs/cgroup/machine.slice/machine-qemu\x2d3\x2dcentos7.0.scope/io.pressure</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;errno.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;poll.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">const</span> <span class="kt">char</span> <span class="n">trig</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"some 500000 1000000"</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">pollfd</span> <span class="n">fds</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>

      <span class="n">fds</span><span class="p">.</span><span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">"/proc/pressure/io"</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_NONBLOCK</span><span class="p">);</span>
      <span class="c1">//fds.fd = open("/sys/fs/cgroup/machine.slice/machine-qemu\\x2d3\\x2dcentos7.0.scope/io.pressure", O_RDWR | O_NONBLOCK);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">fds</span><span class="p">.</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
              <span class="n">printf</span><span class="p">(</span><span class="s">"/proc/pressure/io open error: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
                      <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
              <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">fds</span><span class="p">.</span><span class="n">events</span> <span class="o">=</span> <span class="n">POLLPRI</span><span class="p">;</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="n">fds</span><span class="p">.</span><span class="n">fd</span><span class="p">,</span> <span class="n">trig</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">trig</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
              <span class="n">printf</span><span class="p">(</span><span class="s">"/proc/pressure/io write error: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
                      <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
              <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="n">printf</span><span class="p">(</span><span class="s">"waiting for events...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
              <span class="n">n</span> <span class="o">=</span> <span class="n">poll</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fds</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
              <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                      <span class="n">printf</span><span class="p">(</span><span class="s">"poll error: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
                      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
              <span class="p">}</span>
              <span class="k">if</span> <span class="p">(</span><span class="n">fds</span><span class="p">.</span><span class="n">revents</span> <span class="o">&amp;</span> <span class="n">POLLERR</span><span class="p">)</span> <span class="p">{</span>
                      <span class="n">printf</span><span class="p">(</span><span class="s">"got POLLERR, event source is gone</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
                      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
              <span class="p">}</span>
              <span class="k">if</span> <span class="p">(</span><span class="n">fds</span><span class="p">.</span><span class="n">revents</span> <span class="o">&amp;</span> <span class="n">POLLPRI</span><span class="p">)</span> <span class="p">{</span>
                      <span class="n">printf</span><span class="p">(</span><span class="s">"event triggered!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                      <span class="n">printf</span><span class="p">(</span><span class="s">"unknown event received: 0x%x</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">fds</span><span class="p">.</span><span class="n">revents</span><span class="p">);</span>
                      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
              <span class="p">}</span>
      <span class="p">}</span>

      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET